<<<<<<< HEAD
from deck import Deck, minCard, createComparator
=======
"""
A module used to store classes related to the representation of a game

Classes
-------
Player
    The representation of a game
"""

from deck import Deck
>>>>>>> 56666cef58f394cb26187e1104c76f624ff2b38f
from player import Player
import functools


class Game:
    """
    A class used to represent a game

    Attributes
    ----------
    players : list
        The list of players
    table_card : Card
        The card on the table
    dank: Card.suit
        The suit of the trump card
    """

    def __init__(self, num_players):
        """
        visual:
            2
        1       3
            0

        Deal 6 to each
        Determine who has initial lowest dank (otherwise default to 0)

        Parameters
        ----------
        num_players : int
            The number of players
        """
<<<<<<< HEAD
        """
            Deal 6 to each
            Determine who has initial lowest dank (otherwise default to 0)
        """
        d = Deck()
        d.shuffle()
        self.players = [Player(x) for x in range(numPlayers)]
        for cardNum in range(6):
            for p in self.players:
                p.take(d.draw())

        self.tableCard = d.flip()
        self.dank = self.tableCard.suit  # Determine Dank suit
        self.currentAttacker = 0  # lowest dank starts
        self.turn = 0

        heldDanks = []
        for p in self.players:
            # Accumulate danks held at start of hand
            heldDanks += [(p.num, x) for x in p.hand if x.suit == self.dank]

        print('Table Card:')
        print(self.tableCard)
        print()
        for x, y in heldDanks:
            print(x, y)

        print()
        # print(minCard(heldDanks, self.dank))

        """ Attack -> play Card
            defend -> higher suit, pass, take
        """


g = Game(4)
p = Deck()
p.shuffle()
comparator = createComparator('Diamonds')
print('----')
print(p.cards)
x = sorted(p.cards, key=functools.cmp_to_key(comparator))
print(x)
for y in x:
    print(y)


print('f')



=======
        deck = Deck()
        deck.shuffle()

        self.players = [Player(x) for x in range(num_players)]
        for _ in range(6):
            for player in self.players:
                player.take(deck.draw())

        self.table_card = deck.flip()
        self.dank = self.table_card.suit  # Determine Dank suit
        print('Table Card:')
        print(self.table_card)
        for player in self.players:
            print(player)


def main():
    """
    The main function for the game
    """
    game = Game(4)
    del game  # For now until we use something else with the game variable


if __name__ == "__main__":
    main()
>>>>>>> 56666cef58f394cb26187e1104c76f624ff2b38f
